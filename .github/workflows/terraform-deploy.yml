name: Deploy AWS Infrastructure with Terraform

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
  push:
    branches: [ main ]
    paths:
    - 'aws-deployment/terraform/**'
    - '.github/workflows/terraform-deploy.yml'

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: us-east-1

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action || 'plan' }}
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check
      working-directory: aws-deployment/terraform

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: aws-deployment/terraform

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: aws-deployment/terraform

    - name: Terraform Plan
      id: plan
      if: github.event.inputs.action == 'plan' || github.event_name == 'push'
      run: terraform plan -no-color -out=tfplan
      working-directory: aws-deployment/terraform

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      id: apply
      if: github.event.inputs.action == 'apply'
      run: terraform apply -auto-approve
      working-directory: aws-deployment/terraform

    - name: Terraform Destroy
      id: destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve
      working-directory: aws-deployment/terraform

    - name: Get Terraform Outputs
      if: github.event.inputs.action == 'apply'
      run: |
        echo "API_URL=$(terraform output -raw api_url)" >> $GITHUB_ENV
        echo "RDS_ENDPOINT=$(terraform output -raw rds_endpoint)" >> $GITHUB_ENV
        echo "ECR_REPO_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
      working-directory: aws-deployment/terraform

    - name: Comment PR with Terraform Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Update GitHub Environment Variables
      if: github.event.inputs.action == 'apply'
      run: |
        echo "Infrastructure deployed successfully!"
        echo "API URL: ${{ env.API_URL }}"
        echo "RDS Endpoint: ${{ env.RDS_ENDPOINT }}"
        echo "ECR Repository: ${{ env.ECR_REPO_URL }}"
